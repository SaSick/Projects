{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Zhasick\\\\Desktop\\\\This is patrick\\\\\\u0422\\u0440\\u0435\\u0442\\u0438\\u0439 \\u043A\\u0443\\u0440\\u0441\\\\www\\\\final_project\\\\src\\\\components\\\\PrivateRoute.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { Navigate } from \"react-router-dom\";\nimport { useAuth } from \"../context/AuthContext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PrivateRoute = ({\n  element,\n  ...rest\n}) => {\n  _s();\n  const {\n    isAuthenticated\n  } = useAuth();\n  const ifAuthenticated = () => {\n    // Здесь можно добавить логику проверки аутентификации (например, проверку токена или другие механизмы)\n    // В данном примере всегда возвращает true для тестирования\n  };\n  return ifAuthenticated() ? element : /*#__PURE__*/_jsxDEV(Navigate, {\n    to: \"/loginpage\",\n    state: {\n      from: rest.location.pathname\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 17,\n    columnNumber: 9\n  }, this);\n};\n_s(PrivateRoute, \"+FMsMoIL5uwVaz0G84l09sW3l4Y=\", false, function () {\n  return [useAuth];\n});\n_c = PrivateRoute;\nexport default PrivateRoute;\nvar _c;\n$RefreshReg$(_c, \"PrivateRoute\");","map":{"version":3,"names":["React","Navigate","useAuth","jsxDEV","_jsxDEV","PrivateRoute","element","rest","_s","isAuthenticated","ifAuthenticated","to","state","from","location","pathname","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Zhasick/Desktop/This is patrick/Третий курс/www/final_project/src/components/PrivateRoute.js"],"sourcesContent":["import React from 'react';\r\nimport {Navigate} from \"react-router-dom\";\r\nimport {useAuth} from \"../context/AuthContext\";\r\n\r\nconst PrivateRoute = ({ element, ...rest }) => {\r\n\r\n    const {isAuthenticated} = useAuth();\r\n    const ifAuthenticated = () => {\r\n        // Здесь можно добавить логику проверки аутентификации (например, проверку токена или другие механизмы)\r\n        // В данном примере всегда возвращает true для тестирования\r\n\r\n    };\r\n\r\n    return ifAuthenticated() ? (\r\n        element\r\n    ) : (\r\n        <Navigate to=\"/loginpage\" state={{ from: rest.location.pathname }}/>\r\n    );\r\n};\r\n\r\nexport default PrivateRoute;"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAAQC,QAAQ,QAAO,kBAAkB;AACzC,SAAQC,OAAO,QAAO,wBAAwB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE/C,MAAMC,YAAY,GAAGA,CAAC;EAAEC,OAAO;EAAE,GAAGC;AAAK,CAAC,KAAK;EAAAC,EAAA;EAE3C,MAAM;IAACC;EAAe,CAAC,GAAGP,OAAO,CAAC,CAAC;EACnC,MAAMQ,eAAe,GAAGA,CAAA,KAAM;IAC1B;IACA;EAAA,CAEH;EAED,OAAOA,eAAe,CAAC,CAAC,GACpBJ,OAAO,gBAEPF,OAAA,CAACH,QAAQ;IAACU,EAAE,EAAC,YAAY;IAACC,KAAK,EAAE;MAAEC,IAAI,EAAEN,IAAI,CAACO,QAAQ,CAACC;IAAS;EAAE;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAC,CACtE;AACL,CAAC;AAACX,EAAA,CAdIH,YAAY;EAAA,QAEYH,OAAO;AAAA;AAAAkB,EAAA,GAF/Bf,YAAY;AAgBlB,eAAeA,YAAY;AAAC,IAAAe,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}